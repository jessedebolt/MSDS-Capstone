---
title: "MSDS 2023 Capstone Project"
author: "Jesse DeBolt & Isaac Johnson"
date: "`r Sys.Date()`"
format: html
subtitle: Secondary document for models and predictions
---

#.
# Setup
#.

### Load libraries and knit setup
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)

# Load the necessary libraries
library(httr)
library(readr)
library(tidyverse)
library(gdata)
library(skimr)
library(DataExplorer)
library(GGally)
library(caret)
library(e1071)
library(randomForest)
library(rpart)
library(rpart.plot)
library(corrplot)
library(reshape2)
library(mice)
library(moderndive)
library(dplyr)

```


### Files located in the GitHub repository data folder
```{r}
# File names list
filenames <- c("SEED-UR-Urban-Rural.csv",
               "SEED-SE-Unemployment_Rate.csv",
               "SEED-SE-Poverty.csv",
               "SEED-SE-Median_Household_Income.csv",
               "SEED-SE-Median_Home_Value.csv",
               "SEED-SE-Food_Stamp_SNAP_recipients.csv",
               "SEED-SE-Education-LessThanCollege.csv",
               "SEED-SE-Broadband.csv",
               "SEED-PE-Park_Access.csv",
               "SEED-PE-Air_Quality.csv",
               "RF-Smoking.csv",
               "RF-Physical_Inactivity.csv",
               "RF-Obesity.csv",
               "RF-High_Cholesterol.csv",
               "RF-Diagnosed_Diabetes.csv",
               "Prev-Stroke.csv",
               "Prev-High_Blood_Pressure.csv",
               "Prev-Coronary_Heart_Disease.csv",
               "HCDI-PS-PCP.csv",
               "HCDI-PS-CDP.csv",
               "HCDI-Insurance-Health_Insurance_Status.csv", 
               "HCDI-HP-Pharmacies_and_Drug_Stores.csv",
               "HCDI-HP-Hospitals.csv",
               "HCDI-CRU-Participation_Among_Eligible.csv",
               "HCDI-CRU-Eligibility_Rate.csv",
               "HCDI-CLM-Nonadherence.csv",
               "HCDI-Cholesterol_Screening.csv",
               "HCDI-BPM-Medication_Use.csv",
               "Demo-Total_Population.csv",
               "Demo-Age65Plus.csv"
               )

```


### Create a function to generate the URL for a given filename
```{r}
generate_url <- function(filename) {
  return(paste0("https://raw.githubusercontent.com/jessedebolt/MSDS-Capstone/main/data_raw/", filename))
}

```


### Generate urls for each filename
```{r}
urls <- sapply(filenames, generate_url)

```


### Read the CSV files into a list of data frames
```{r }
# Read the CSV files into a list of data frames
df_list <- lapply(urls, read_csv)

# Create names for the list items (remove the .csv from the filenames)
names(df_list) <- sapply(filenames, function(filename) gsub(".csv", "", filename))

# Create individual data frames
list2env(df_list, .GlobalEnv)

```


### Merge all sets together into one data frame
```{r}
# Get all the data frame names in the global environment
df_names <- ls(.GlobalEnv)

# Initialize an empty data frame for the final result
cdc <- data.frame()

# Loop through each data frame
for (df_name in df_names) {
  
  # Get the data frame
  df <- get(df_name, envir = .GlobalEnv)
  
  # Check if 'cnty_fips' and 'display_name' exist in the data frame
  if(all(c("cnty_fips", "display_name") %in% colnames(df))){
    
    # Convert 'cnty_fips' column to character type
    df$cnty_fips <- as.character(df$cnty_fips)
    
    # Select all columns excluding those with "theme_range" in their name
    df <- df %>%
      select(-contains("theme_range"))

    # Rename each variable, except 'cnty_fips' and 'display_name', to include the data frame name
    df <- df %>%
      rename_with(.cols = -c(cnty_fips, display_name),
                  .fn = ~ paste(df_name, ., sep = "_"))
    
    # Join the data frame with the final data frame
    if (nrow(cdc) == 0){
      cdc <- df
    } 
    else {
      cdc <- full_join(cdc, df, by = c("cnty_fips", "display_name"))
      
      # Remove the ".x" from the column names
      names(cdc) <- gsub("\\.x$", "", names(cdc))
      
      # Remove the "_Value" from the column names
      names(cdc) <- gsub("\\_Value$", "", names(cdc))
    }
  }
}

```


### Renaming variables
```{r}
# Mapping of original names to new names
name_mapping <- c("cnty_fips" = "fips",
                  "display_name" = "display_name",
                  "SEED-UR-Urban-Rural" = "UrbanRural",
                  "SEED-SE-Unemployment_Rate" = "Unemploy",
                  "SEED-SE-Poverty" = "Poverty",
                  "SEED-SE-Median_Household_Income" = "MedHouseIncome",
                  "SEED-SE-Median_Home" = "MedHomeValue",
                  "SEED-SE-Food_Stamp_SNAP_recipients" = "SNAPrecipients",
                 "SEED-SE-Education-LessThanCollege" = "EdLessColl",
                 "SEED-SE-Broadband" = "Broadband",
                 "SEED-PE-Park_Access" = "Parks",
                 "SEED-PE-Air_Quality" = "AirQuality",
                 "RF-Smoking" = "Smoker",
                 "RF-Physical_Inactivity" = "PhysInactivity",
                 "RF-Obesity" = "Obesity",
                 "RF-High_Cholesterol" = "HighChol",
                 "RF-Diagnosed_Diabetes" = "Diabetes",
                 "Prev-Stroke" = "Stroke",
                 "Prev-High_Blood_Pressure" = "HighBP",
                 "Prev-Coronary_Heart_Disease" = "CHD",
                 "HCDI-PS-PCP" = "PrimaryCarePhys",
                 "HCDI-PS-CDP" = "CardioPhys",
                 "HCDI-Insurance-Health_Insurance_Status" = "HealthIns",
                 "HCDI-HP-Pharmacies_and_Drug_Stores" = "Pharmacies",
                 "HCDI-HP-Hospitals" = "Hospitals",
                 "HCDI-CRU-Participation_Among_Eligible" = "cruParticipate",
                 "HCDI-CRU-Eligibility_Rate" = "CholMedElegible",
                 "HCDI-CLM-Nonadherence" = "CholMedNonAdhear",
                 "HCDI-Cholesterol_Screening" = "CholScreen",
                 "HCDI-BPM-Medication_Use" = "bpmUse",
                 "Demo-Total_Population" = "pop",
                 "Demo-Age65Plus" = "Age65Plus"
                 )

# Get the column names of the data frame
original_names <- colnames(cdc)

# Find the corresponding new names using the mapping
new_names <- name_mapping[match(original_names, names(name_mapping))]

# Rename the variables in the data frame
colnames(cdc) <- new_names

```


### Read in data for table descriptions
```{r}
TableDesc <- read_csv("data_support/Table_Descriptions.csv")

```

#.
# Data Cleaning
#.

### Removing US territories
```{r}
#Remove territories
cdc <- cdc %>%
  filter(!grepl("\\(AS\\)|\\(GU\\)|\\(MP\\)|\\(PR\\)|\\(County Equivalent\\)", as.character(display_name)))

```


### Separated County and State
```{r}
# Separate the 'display_name' column
cdc <- cdc %>% separate(display_name, into = c("county", "state"), sep = ", \\(|\\)", remove = TRUE, convert = TRUE)

# Remove the closing parenthesis from the state column
cdc$state <- gsub("\\)", "", cdc$state)

# Remove the quotation marks from the 'county' column
cdc$county <- gsub("\"", "", cdc$county)

print(cdc)

```


### Make backup and display first few rows
```{r}
cdc_copy <- cdc

head(cdc)

```


### Relabeling Urban/Rural codes
```{r}
#change rural/urban
# 1 = Large central metro -> Large_Urban
# 2 = Large fringe metro -> LargeFringe_Urban
# 3 = Medium/small metro -> MediumSmall_Urban
# 4 = Nonmetro -> Rural

cdc$"UrbanRural" <-
    ifelse(cdc$"UrbanRural" == 1,
           "Large_Urban",
    ifelse(cdc$"UrbanRural" == 2,
           "LargeFringe_Urban",
    ifelse(cdc$"UrbanRural" == 3,
           "MediumSmall_Urban",
    ifelse(cdc$"UrbanRural" == 4,
           "Rural",
           cdc$"UrbanRural"))))

### Replacing '-1' with 'NA' under assumption that these are truly missing elements
cdc[cdc == -1] <- NA

```


### Review header names, check for missing rural/urban values
```{r}
names(cdc)

unique(cdc$'UrbanRural')

rural_query <- filter(cdc, `UrbanRural` %in% c(NA, "", "NA"))

head(rural_query, n=20)

```


### Inserting Rural/Urban for missing value
```{r}
# Find and insert where county is 'Kusilvak' based on Wikipedia data.
cdc$"UrbanRural"[grepl("Kusilvak", cdc$county)] <- "Rural"

unique(cdc$'UrbanRural')

# Double check for any NAs in Rural/Urban
rural_query <- filter(cdc, `UrbanRural` %in% c(NA, "", "NA"))
head(rural_query, n=20)

```


### Inserting Parks missing value
```{r}
# Find and insert where county is 'Kusilvak' based on average for all AK counties.
cdc$"Parks"[grepl("Kusilvak", cdc$county)] <- 66

```


### Checking for missing values
```{r}
#total number of missing values in dataset
sum(is.na(cdc))

#total number of missing values in each column
colSums(is.na(cdc))

#total number of missing values in each column
count_na_func <- function(x) sum(is.na(x)) 
cdc <- cdc %>%
  mutate(count_na = apply(., 1, count_na_func)) %>% 
  arrange(desc(count_na))

```


### Remove counties with minimal data
```{r}
# Remove those that have more than 8 NAs in that row
cdc <- cdc[cdc$count_na <= 8, ]

# Remove count_na column
cdc$count_na <- NULL

```


## Populating missing values
## Single value entry
### Inserting value for missing values in bpmUse for NJ
```{r}
# Find NAs and replace where state is 'NJ'
cdc$"bpmUse"[grepl("NJ", cdc$state)] <- 71.71

```
Source: Average of NJ Cities from
500_Cities: Taking medicine for high blood pressure control among adults aged >=18 Years with high blood pressure
File: 500_Cities__Taking_medicine_for_high_blood_pressure_control_among_adults_aged___18_years_with_high_blood_pressure.csv
Source: https://chronicdata.cdc.gov/500-Cities-Places/500-Cities-Taking-medicine-for-high-blood-pressure/4peq-qp55


### Inserting value for missing values in CholScreen for NJ
```{r}
# Find NAs and replace where state is 'NJ'
cdc$"CholScreen"[grepl("NJ", cdc$state)] <- 79.43

```
Source: Average of NJ Cities from
500 Cities: Cholesterol screening among adults aged >=18 years
FIle: 500_Cities__Cholesterol_screening_among_adults_aged___18_years.csv
Source: https://chronicdata.cdc.gov/500-Cities-Places/500-Cities-Cholesterol-screening-among-adults-aged/myk4-ptre


### Inserting value for missing values in HighBP for NJ
```{r}
# Find NAs and replace where state is 'NJ'
cdc$"HighBP"[grepl("NJ", cdc$state)] <- 33.7

```
Source: Average of NJ Cities from
500 Cities: High blood pressure among adults aged >=18 years
File: 500_Cities__High_blood_pressure_among_adults_aged___18_years.csv
Source: https://chronicdata.cdc.gov/500-Cities-Places/500-Cities-High-blood-pressure-among-adults-aged-1/ebxs-yc6e


### Inserting value for missing values in Diabetes for NJ
```{r}
# Find NAs and replace where state is 'NJ'
cdc$"Diabetes"[grepl("NJ", cdc$state)] <- 17.4

```
Source: Average of NJ Cities from
500 Cities: Diagnosed diabetes among adults aged >=18 years
File: 500_Cities__Diagnosed_diabetes_among_adults_aged___18_years.csv
Source: https://chronicdata.cdc.gov/500-Cities-Places/500-Cities-Diagnosed-diabetes-among-adults-aged-18/cn78-b9bj


### Inserting value for missing values in HighChol for NJ
```{r}
# Find NAs and replace where state is 'NJ'
cdc$"HighChol"[grepl("NJ", cdc$state)] <- 32.41

```
Source: Average of NJ Cities from
500 Cities: High cholesterol among adults aged >=18 years who have been screened in the past 5 years
File:500_Cities__High_cholesterol_among_adults_aged___18_years_who_have_been_screened_in_the_past_5_years.csv
Source: https://chronicdata.cdc.gov/500-Cities-Places/500-Cities-High-cholesterol-among-adults-aged-18-y/mc6z-sjie


### Inserting value for missing values in Obesity for NJ
```{r}
# Find NAs and replace where state is 'NJ'
cdc$"Obesity"[grepl("NJ", cdc$state)] <- 33.59

```
Source: Average of NJ Cities from
500 Cities: Obesity among adults aged >=18 years
File: 500_Cities__Obesity_among_adults_aged___18_years.csv
Source: https://chronicdata.cdc.gov/500-Cities-Places/500-Cities-Obesity-among-adults-aged-18-years/bjvu-3y7d


### Inserting values for missing values in Median Home Value
```{r}
cdc$"MedHomeValue"[grepl("48261", cdc$fips)] <- 42550
cdc$"MedHomeValue"[grepl("48301", cdc$fips)] <- 38143
cdc$"MedHomeValue"[grepl("46017", cdc$fips)] <- 101393
cdc$"MedHomeValue"[grepl("46095", cdc$fips)] <- 60537

```
Reference:
Kenedy TX (fips 48261): Median Home Value = $42,550
https://www.city-data.com/county/Kenedy_County-TX.html
Loving TX (fips 48301): Median Home Value = $38,143
http://www.city-data.com/county/Loving_County-TX.html
Buffalo SD (fips 46017): Median Home Value = $101,393
http://www.city-data.com/county/Buffalo_County-SD.html
Mellette SD (fips 46095): Median Home Value = $60,537
http://www.city-data.com/county/Mellette_County-SD.html


## Multiple value entry
### Read in additional data
```{r}
pcp_cardio_count <- read_csv("data_support/pcp_cardio_count.csv")

pcp_cardio_count$COUNTY = as.character(pcp_cardio_count$COUNTY)

```


### Populating missing items for PCPs and Cardio Phys
```{r}
# Joining count data frame to the cdc data frame
cdc <- left_join(cdc, pcp_cardio_count, by = c("fips" = "COUNTY"))

# Use coalesce to replace NAs in PCP and CardioPhys
cdc <- cdc %>% 
  mutate(
    pcp = coalesce(pcp, PrimaryCarePhys),
    CardioPhys = coalesce(CardioPhys, cardio)
  )

# Remove the temporary columns
cdc <- cdc %>% select(-PrimaryCarePhys, -cardio)

```


## Imputations
### Impute remaining missing Cardiologists and Primary Care Physicians based on median of urban/rural for each state
```{r}
# Calculate medians and impute NAs
cdc <- cdc %>%
  group_by(state) %>%
  group_by(UrbanRural) %>% 
  mutate(
    CardioPhys = replace_na(CardioPhys, median(CardioPhys, na.rm = TRUE)),
    pcp = replace_na(pcp, median(pcp, na.rm = TRUE))
  )
```


### Imputing missing values in CholMedNonAdhear based on median of urban/rural for each state
```{r}
cdc = cdc %>%
  group_by(state) %>%
  group_by(UrbanRural) %>% 
  mutate(CholMedNonAdhear = replace_na(CholMedNonAdhear, median(CholMedNonAdhear, na.rm=TRUE)))

```


### Imputing missing values in CholMedElegible based on median of urban/rural for each state
```{r}
cdc = cdc %>% 
  group_by(state) %>%
  group_by(UrbanRural) %>% 
  mutate(CholMedElegible = replace_na(CholMedElegible, median(CholMedElegible, na.rm=TRUE)))

```


### Imputing missing values in cruParticipate based on median of urban/rural for each state
```{r}
cdc = cdc %>% 
  group_by(state) %>%
  group_by(UrbanRural) %>% 
  mutate(cruParticipate = replace_na(cruParticipate, median(cruParticipate, na.rm=TRUE)))

```


### Imputing missing values in PhysInactivity based on median of urban/rural for each state
```{r}
cdc = cdc %>% 
  group_by(state) %>%
  group_by(UrbanRural) %>% 
  mutate(PhysInactivity = replace_na(PhysInactivity, median(PhysInactivity, na.rm=TRUE)))

```


### Imputing missing values in AirQuality based on median of urban/rural for each state
```{r}
cdc = cdc %>% 
  group_by(state) %>%
  group_by(UrbanRural) %>% 
  mutate(AirQuality = replace_na(AirQuality, median(AirQuality, na.rm=TRUE)))

```


### Checking for missing values
```{r}
#total number of missing values in dataset
sum(is.na(cdc))

#total number of missing values in each column
colSums(is.na(cdc))

```

#.
# Linear Models
#.

### Remove unnedded/duplicated columns
```{r}
# Select and rearrange columns
cdc <- cdc %>% select(c("county", "state", "UrbanRural", "CHD",
"HighBP", "HighChol", "Stroke", "Diabetes", "Obesity",
"PhysInactivity", "Smoker", "Age65Plus","CholScreen",
"CholMedNonAdhear", "CholMedElegible", "cruParticipate",
"bpmUse", "MedHouseIncome", "Poverty", "Unemploy",
"SNAPrecipients", "EdLessColl", "MedHomeValue",
"HealthIns", "AirQuality", "Parks", "Broadband","pcp",
"CardioPhys", "Hospitals", "Pharmacies", "pop"))

```



## Additional feature engineering
```{r}
# Convert urban/rural variables to factors
cdc$UrbanRural <- as.factor(cdc$UrbanRural)

# Clean up global environment
keep(cdc, TableDesc, sure = TRUE)

```


### Full model CHD as target method=lm
```{r}
# Set the seed
set.seed(2112)

#create dataset for model
cdc_step <- cdc %>% select(-c(county, state,))

cdc_step$UrbanRural <- factor(ifelse(cdc_step$UrbanRural %in% c("Large_Urban", "LargeFringe_Urban", "MediumSmall_Urban"), 1, 0))

#train test split
cdc_index_step <- createDataPartition(cdc_step$CHD, p = 0.8, list = FALSE)
cdc_tr_step <- cdc_step[cdc_index_step, ]
cdc_te_step <- cdc_step[-cdc_index_step, ]

#Rsquared 95%
control_step <- trainControl(method="repeatedcv", number =5, repeats=3)
model_step <- train(CHD ~ ., data=cdc_tr_step, method="lm", trControl = control_step)
print(model_step$resample)
model_step

importance_step <- varImp(model_step, scale=TRUE)
plot(importance_step)

```


### Full model CHD as target method=glm
```{r}
# Set the seed
set.seed(2112)

#create dataset for model
cdc_step <- cdc %>% select(-c(county, state,))

cdc_step$UrbanRural <- factor(ifelse(cdc_step$UrbanRural %in% c("Large_Urban", "LargeFringe_Urban", "MediumSmall_Urban"), 1, 0))

#train test split
cdc_index_step <- createDataPartition(cdc_step$CHD, p = 0.8, list = FALSE)
cdc_tr_step <- cdc_step[cdc_index_step, ]
cdc_te_step <- cdc_step[-cdc_index_step, ]

#Rsquared 95%
control_step <- trainControl(method="repeatedcv", number =5, repeats=3)
model_step <- train(CHD ~ ., data=cdc_tr_step, method="glm", trControl = control_step)
print(model_step$resample)
model_step

importance_step <- varImp(model_step, scale=TRUE)
plot(importance_step)

```


### Full model CHD as target method=glm, family=poisson
```{r}
# Set the seed
set.seed(2112)

#create dataset for model
cdc_step <- cdc %>% select(-c(county, state,))

cdc_step$UrbanRural <- factor(ifelse(cdc_step$UrbanRural %in% c("Large_Urban", "LargeFringe_Urban", "MediumSmall_Urban"), 1, 0))

#train test split
cdc_index_step <- createDataPartition(cdc_step$CHD, p = 0.8, list = FALSE)
cdc_tr_step <- cdc_step[cdc_index_step, ]
cdc_te_step <- cdc_step[-cdc_index_step, ]

#Rsquared 95%
control_step <- trainControl(method="repeatedcv", number =5, repeats=3)
model_step <- train(CHD ~ ., data=cdc_tr_step, method="glm", trControl = control_step, family = "poisson")
print(model_step$resample)
model_step

importance_step <- varImp(model_step, scale=TRUE)
plot(importance_step)

```



#.
#.
# BREAK
#.
#.


###Basic Model just "CHD", "HighBP", "HighChol", "Stroke" 90% R2
```{r}
set.seed(123)

#create dataset for model (4:70)
cdc_basic <- cdc %>% dplyr::select(4:8)

cdc_basic$UrbanRural <- factor(ifelse(cdc_basic$UrbanRural %in% c("Large_Urban", "LargeFringe_Urban", "MediumSmall_Urban"), 1, 0))

#train test split
cdc_index_basic <- createDataPartition(cdc_basic$CHD, p = 0.8, list = FALSE)
cdc_tr_basic <- cdc_basic[cdc_index_basic, ]
cdc_te_basic <- cdc_basic[-cdc_index_basic, ]


control_basic <- trainControl(method="repeatedcv", number =5, repeats=3)
#Rsquared xx%
model_basic <- train(CHD ~ .,
                    data=cdc_tr_basic,
                    method="lm",
                    trControl = control_basic)
print(model_basic$resample)

model_basic

importance_basic <- varImp(model_basic, scale=TRUE)
plot(importance_basic)

```


###Basic Model 2 now added "Smoker", "Age65Plus" 94% R2
```{r}
set.seed(123)

#create dataset for model (4:70)
cdc_basic <- cdc %>% dplyr::select("CHD", "HighBP", "HighChol", "Stroke", "Smoker", "Age65Plus")

# cdc_basic$UrbanRural <- factor(ifelse(cdc_basic$UrbanRural %in% c("Large_Urban", "LargeFringe_Urban", "MediumSmall_Urban"), 1, 0))

#train test split
cdc_index_basic <- createDataPartition(cdc_basic$CHD, p = 0.8, list = FALSE)
cdc_tr_basic <- cdc_basic[cdc_index_basic, ]
cdc_te_basic <- cdc_basic[-cdc_index_basic, ]


control_basic <- trainControl(method="repeatedcv", number =5, repeats=3)
#Rsquared xx%
model_basic <- train(CHD ~ .,
                    data=cdc_tr_basic,
                    method="lm",
                    trControl = control_basic)
print(model_basic$resample)

model_basic

importance_basic <- varImp(model_basic, scale=TRUE)
plot(importance_basic)

```


###Basic Model 3 now added "CholMedElegible", "HealthIns" 94.6% R2
```{r}
set.seed(123)

#create dataset for model (4:70)
cdc_basic <- cdc %>% dplyr::select("CHD", "HighBP", "HighChol", "Stroke", "Smoker", "Age65Plus", "CholMedElegible", "HealthIns")

# cdc_basic$UrbanRural <- factor(ifelse(cdc_basic$UrbanRural %in% c("Large_Urban", "LargeFringe_Urban", "MediumSmall_Urban"), 1, 0))

#train test split
cdc_index_basic <- createDataPartition(cdc_basic$CHD, p = 0.8, list = FALSE)
cdc_tr_basic <- cdc_basic[cdc_index_basic, ]
cdc_te_basic <- cdc_basic[-cdc_index_basic, ]


control_basic <- trainControl(method="repeatedcv", number =5, repeats=3)
#Rsquared xx%
model_basic <- train(CHD ~ .,
                    data=cdc_tr_basic,
                    method="lm",
                    trControl = control_basic)
print(model_basic$resample)

model_basic

importance_basic <- varImp(model_basic, scale=TRUE)
plot(importance_basic)

```

###Basic Model 4 now removed  "HighBP", "HighChol", "Stroke" 88.8% R2
```{r}
set.seed(123)

#create dataset for model (4:70)
cdc_basic <- cdc %>% dplyr::select("CHD", "Age65Plus", "Smoker", "HealthIns", "Parks", "Obesity", "MedHouseIncome", "Diabetes", "CholScreen", "UrbanRural", "SNAPrecipients", "Broadband", "AirQuality", "Pharmacies", "EdLessColl", "PhysInactivity", "Hospitals", "Poverty", "pcp", )

cdc_basic$UrbanRural <- factor(ifelse(cdc_basic$UrbanRural %in% c("Large_Urban", "LargeFringe_Urban", "MediumSmall_Urban"), 1, 0))

#train test split
cdc_index_basic <- createDataPartition(cdc_basic$CHD, p = 0.8, list = FALSE)
cdc_tr_basic <- cdc_basic[cdc_index_basic, ]
cdc_te_basic <- cdc_basic[-cdc_index_basic, ]


control_basic <- trainControl(method="repeatedcv", number =5, repeats=3)
#Rsquared xx%
model_basic <- train(CHD ~ .,
                    data=cdc_tr_basic,
                    method="lm",
                    trControl = control_basic)
print(model_basic$resample)

model_basic

importance_basic <- varImp(model_basic, scale=TRUE)
plot(importance_basic)

```


need whole model first for HIGH BP then stepwise feature selection
###Basic Model 5 now predicting High BP  R2
```{r}
set.seed(123)

#create dataset for model (4:70)
cdc_basic <- cdc %>% dplyr::select("HighBP", "Age65Plus", "Smoker", "HealthIns", "Parks", "Obesity", "MedHouseIncome", "Diabetes", "CholScreen", "UrbanRural", "SNAPrecipients", "Broadband", "AirQuality", "Pharmacies", "EdLessColl", "PhysInactivity", "Hospitals", "Poverty", "pcp")

cdc_basic$UrbanRural <- factor(ifelse(cdc_basic$UrbanRural %in% c("Large_Urban", "LargeFringe_Urban", "MediumSmall_Urban"), 1, 0))

#train test split
cdc_index_basic <- createDataPartition(cdc_basic$HighBP, p = 0.8, list = FALSE)
cdc_tr_basic <- cdc_basic[cdc_index_basic, ]
cdc_te_basic <- cdc_basic[-cdc_index_basic, ]


control_basic <- trainControl(method="repeatedcv", number =5, repeats=3)
#Rsquared xx%
model_basic <- train(HighBP ~ .,
                    data=cdc_tr_basic,
                    method="lm",
                    trControl = control_basic)
print(model_basic$resample)

model_basic

importance_basic <- varImp(model_basic, scale=TRUE)
plot(importance_basic)

```




